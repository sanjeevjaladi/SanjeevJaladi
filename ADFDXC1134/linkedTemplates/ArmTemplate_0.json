{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "adfdxc1134"
		},
		"LS_ADLS_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'LS_ADLS'"
		},
		"LS_ASQL_ABC_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_ABC'"
		},
		"LS_ASQL_DXC_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_DXC'"
		},
		"LS_File_Share_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_File_Share'"
		},
		"LS_ADLS_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://adlsdxc1134.azuredatalakestore.net/webhdfs/v1"
		},
		"LS_ADLS_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "fca6896e-ee6a-4875-898a-e17f21fd7b90"
		},
		"LS_ADLS_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "93f33571-550f-43cf-b09f-cd331338d086"
		},
		"LS_ADLS_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "aa9d0e6b-d25e-4e3b-94b3-3c71c403c9e7"
		},
		"LS_ADLS_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "RGDXC1134"
		},
		"DS_ADLS_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FilePath"
		},
		"DS_ADLS_File_Name_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().File_Name"
		},
		"DS_ADLS_File_Name_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().File_Path"
		},
		"DS_ADLS_From_To_DateTime_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FilePath"
		},
		"LS_File_Share_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "sjaladi3@dxc.com"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('LS_ADLS_properties_typeProperties_dataLakeStoreUri')]",
					"servicePrincipalId": "[parameters('LS_ADLS_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('LS_ADLS_servicePrincipalKey')]"
					},
					"tenant": "[parameters('LS_ADLS_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('LS_ADLS_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('LS_ADLS_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_ABC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_ABC_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_DXC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_DXC_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileShare')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cyc_Close')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Cyc_Close",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ABC].[UPDATE_CYC_END_NEW]",
							"storedProcedureParameters": {
								"CYC_SK": {
									"value": {
										"value": "@pipeline().parameters.CYC_SK",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_ABC",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"CYC_SK": {
						"type": "Int"
					}
				},
				"folder": {
					"name": "ABC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_ABC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cyc_Start')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Cyc_Start",
						"description": "",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ABC].[UPDATE_CYC_START_NEW]",
							"storedProcedureParameters": {
								"CYC_SK": {
									"value": {
										"value": "@pipeline().parameters.CYC_SK",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"FORCE_IND": {
									"value": {
										"value": "@pipeline().parameters.FORCE_IND",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_ABC",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"CYC_SK": {
						"type": "Int"
					},
					"FORCE_IND": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ABC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_ABC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Job_End')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Job_End",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ABC].[UPDATE_JOB_END_NEW]",
							"storedProcedureParameters": {
								"DATA_READ": {
									"value": {
										"value": "@pipeline().parameters.DATA_READ",
										"type": "Expression"
									},
									"type": "String"
								},
								"DATA_WRITTEN": {
									"value": {
										"value": "@pipeline().parameters.DATA_WRITTEN",
										"type": "Expression"
									},
									"type": "String"
								},
								"ERR_MSG": {
									"value": {
										"value": "@pipeline().parameters.ERR_MSG",
										"type": "Expression"
									},
									"type": "String"
								},
								"JOB_SK": {
									"value": {
										"value": "@pipeline().parameters.JOB_SK",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ROWS_LOADED": {
									"value": {
										"value": "@pipeline().parameters.ROWS_LOADED",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ROWS_READ": {
									"value": {
										"value": "@pipeline().parameters.ROWS_READ",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"STATUS": {
									"value": {
										"value": "@pipeline().parameters.STATUS",
										"type": "Expression"
									},
									"type": "String"
								},
								"THROUGHPUT": {
									"value": {
										"value": "@coalesce(pipeline().parameters.THROUGHPUT,0)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_ABC",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"JOB_SK": {
						"type": "Int"
					},
					"STATUS": {
						"type": "String"
					},
					"DATA_READ": {
						"type": "String"
					},
					"DATA_WRITTEN": {
						"type": "String"
					},
					"ROWS_READ": {
						"type": "String"
					},
					"ROWS_LOADED": {
						"type": "String"
					},
					"ERR_MSG": {
						"type": "String"
					},
					"ABC_SCHEM": {
						"type": "String"
					},
					"THROUGHPUT": {
						"type": "Float",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "ABC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_ABC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Job_Start')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Job_Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ABC].[UPDATE_JOB_START_NEW]",
							"storedProcedureParameters": {
								"JOB_SK": {
									"value": {
										"value": "@pipeline().parameters.JOB_SK",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"PL_RUN_ID": {
									"value": {
										"value": "@pipeline().parameters.PL_RUN_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"STEP_SK": {
									"value": {
										"value": "@pipeline().parameters.STEP_SK",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_ABC",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"JOB_SK": {
						"type": "Int"
					},
					"PL_RUN_ID": {
						"type": "String"
					},
					"STEP_SK": {
						"type": "Int"
					}
				},
				"folder": {
					"name": "ABC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_ABC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Step_End')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Step_End",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ABC].[UPDATE_STEP_END_NEW]",
							"storedProcedureParameters": {
								"STATUS": {
									"value": {
										"value": "@pipeline().parameters.STATUS",
										"type": "Expression"
									},
									"type": "String"
								},
								"STEP_SK": {
									"value": {
										"value": "@pipeline().parameters.STEP_SK",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_ABC",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"STEP_SK": {
						"type": "Int"
					},
					"STATUS": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ABC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_ABC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Step_Start')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Step_Start",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ABC].[UPDATE_STEP_START_NEW]",
							"storedProcedureParameters": {
								"FORCE_IND": {
									"value": {
										"value": "@pipeline().parameters.FORCE_IND",
										"type": "Expression"
									},
									"type": "String"
								},
								"STEP_SK": {
									"value": {
										"value": "@pipeline().parameters.STEP_SK",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_ABC",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"STEP_SK": {
						"type": "Int"
					},
					"FORCE_IND": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ABC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_ABC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FilePath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureDataLakeStoreFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"folderPath": {
						"value": "[parameters('DS_ADLS_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_FileName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FilePath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FilePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_File_Name')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"File_Name": {
						"type": "string"
					},
					"File_Path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureDataLakeStoreFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": "|",
						"rowDelimiter": "",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": {
						"value": "[parameters('DS_ADLS_File_Name_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('DS_ADLS_File_Name_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_From_To_DateTime')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FilePath": {
						"type": "string"
					},
					"FromDateTime": {
						"type": "string"
					},
					"ToDateTime": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureDataLakeStoreFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"folderPath": {
						"value": "[parameters('DS_ADLS_From_To_DateTime_properties_typeProperties_folderPath')]",
						"type": "Expression"
					},
					"modifiedDatetimeStart": {
						"value": "@dataset().FromDateTime",
						"type": "Expression"
					},
					"modifiedDatetimeEnd": {
						"value": "@dataset().ToDateTime",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_ABC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_ABC",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_ABC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_DXC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DXC",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DXC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_File_Share')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "C:\\File_Share",
					"userId": "[parameters('LS_File_Share_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_File_Share_password')]"
					}
				},
				"connectVia": {
					"referenceName": "FileShare",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/FileShare')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_Multiple_Tables_To_ADLS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_All_Files_From_Source_Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT TABLE_NAME, LAST_UPDATED_COLUMN FROM  RD.SOURCE_TABLE_INFO WHERE IS_ACTIVE = 1"
							},
							"dataset": {
								"referenceName": "DS_SQL_DXC",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Iterate_For_Each_Source_Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_All_Files_From_Source_Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_All_Files_From_Source_Table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get_Min_Max_Dates",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select  MIN(@{item().LAST_UPDATED_COLUMN}) MIN_DATE, MAX(@{item().LAST_UPDATED_COLUMN})  MAX_DATE from @{item().TABLE_NAME}",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_SQL_DXC",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Get_Table_Name_From_Updates",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select Count(TABLE_NAME) TABLE_NAME from RD.LAST_UPDATES_INFO  WHERE  TABLE_NAME = '@{item().TABLE_NAME}' ",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_SQL_DXC",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Check_For_File_In_Update",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get_Table_Name_From_Updates",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Get_Min_Max_Dates",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Get_Table_Name_From_Updates').output.firstRow.TABLE_NAME , 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Insert_New_Tabels",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[rd].[SP_INS_LAST_UPDATES_INFO]",
													"storedProcedureParameters": {
														"AUDIT_DTTM": {
															"value": {
																"value": "@activity('Get_Min_Max_Dates').output.firstRow.MIN_DATE",
																"type": "Expression"
															},
															"type": "String"
														},
														"TABLE_NAME": {
															"value": {
																"value": "@item().TABLE_NAME",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_DXC",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Get_Count_Between_Min_Max",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get_Last_Modified_Date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT COUNT(*) RCOUNT FROM @{item().TABLE_NAME} WHERE \n\n@{item().LAST_UPDATED_COLUMN} > '@{activity('Get_Last_Modified_Date').output.firstRow.AUDIT_DTTM}' AND @{item().LAST_UPDATED_COLUMN}  <= '@{activity('Get_Min_Max_Dates').output.firstRow.MAX_DATE}'",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_SQL_DXC",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Check_For_New_Records",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get_Count_Between_Min_Max",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get_Count_Between_Min_Max').output.firstRow.RCOUNT, 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Move_Records",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT * FROM @{item().TABLE_NAME} WHERE \n@{item().LAST_UPDATED_COLUMN} > '@{activity('Get_Last_Modified_Date').output.firstRow.AUDIT_DTTM}' AND @{item().LAST_UPDATED_COLUMN}  <= '@{activity('Get_Min_Max_Dates').output.firstRow.MAX_DATE}'",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureDataLakeStoreWriteSetting"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSetting",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_SQL_DXC",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ADLS_File_Name",
														"type": "DatasetReference",
														"parameters": {
															"File_Name": {
																"value": "@concat(item().TABLE_NAME, '_', addhours(utcnow(), -1, 'dd'), '_' , addhours(utcnow(), -1, 'MM'), '_' , addhours(utcnow(), -1, 'yyyy'), '_', addhours(utcnow(), -1, 'HH'), '_' , addhours(utcnow(), -1, 'mm'), '_' , addhours(utcnow(), -1, 'ss') )",
																"type": "Expression"
															},
															"File_Path": {
																"value": "@concat('Tables_Date', '\\', item().TABLE_NAME)",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Update_Last_Modify_Date",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Move_Records",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[rd].[SP_LAST_UPDATES_INFO]",
													"storedProcedureParameters": {
														"AUDIT_DTTM": {
															"value": {
																"value": "@{activity('Get_Min_Max_Dates').output.firstRow.MAX_DATE}",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"TABLE_NAME": {
															"value": {
																"value": "@item().TABLE_NAME",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_DXC",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Get_Last_Modified_Date",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Check_For_File_In_Update",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT AUDIT_DTTM FROM RD.LAST_UPDATES_INFO WHERE TABLE_NAME = '@{item().TABLE_NAME}'",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_SQL_DXC",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"folder": {
					"name": "R&D"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_DXC')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DXC')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_File_Name')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Multiple_File_Watcher')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check_For_Files",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(length(variables('V_File_Name_1')),1), equals(length(variables('V_File_Name_2')),1) )",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get_File_Names",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "Source\\Sample_Files",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										]
									}
								},
								{
									"name": "Check_For_File_1",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "Get_File_Names",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Get_File_Names').output.Childitems",
											"type": "Expression"
										},
										"condition": {
											"value": "@contains(item().name, 'ACK_File_1_Something.txt')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Check_For_File_2",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "Get_File_Names",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Get_File_Names').output.Childitems",
											"type": "Expression"
										},
										"condition": {
											"value": "@contains(item().name, 'ACK_File_1_SomethingElse.txt')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File_Name_1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check_For_File_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "V_File_Name_1",
										"value": {
											"value": "@activity('Check_For_File_1').output.Value",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File_Name_2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check_For_File_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "V_File_Name_2",
										"value": {
											"value": "@activity('Check_For_File_2').output.Value",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "File_Name_1",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "File_Name_2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(length(variables('V_File_Name_1')),1), equals(length(variables('V_File_Name_2')),1) )",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait_For_Files",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 30
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Call_Pipeline",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								}
							],
							"timeout": "00.00:01:00"
						}
					},
					{
						"name": "If Condition2",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check_For_Files",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(length(variables('V_File_Name_1')),1), equals(length(variables('V_File_Name_2')),1) )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "No_ACK_Files",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Call_Next_Pipeline",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Check_For_Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"variables": {
					"V_File_Name_2": {
						"type": "Array"
					},
					"V_File_Name_1": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "FIle Watcher"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Single_File_Watcher')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check_For_File",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check_For_File_Exist').output.Exists",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check_For_File_Exist",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ADLS_File_Name",
											"type": "DatasetReference",
											"parameters": {
												"File_Name": {
													"value": "@pipeline().parameters.File_Name",
													"type": "Expression"
												},
												"File_Path": {
													"value": "@pipeline().parameters.File_Path",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										]
									}
								},
								{
									"name": "No_Files_Waite",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Check_For_File_Exist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "00.00:01:00"
						}
					},
					{
						"name": "IfCondition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check_For_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check_For_File_Exist').output.Exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "No_ACK_File",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Call_Next_Pipeline",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Check_For_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"parameters": {
					"File_Name": {
						"type": "string",
						"defaultValue": "ACK_File_1_Something.txt"
					},
					"File_Path": {
						"type": "string",
						"defaultValue": "Source\\Sample_Files"
					}
				},
				"folder": {
					"name": "FIle Watcher"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_File_Name')]"
			]
		}
	]
}